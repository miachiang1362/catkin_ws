// Generated by gencpp from file test2/Multiply.msg
// DO NOT EDIT!


#ifndef TEST2_MESSAGE_MULTIPLY_H
#define TEST2_MESSAGE_MULTIPLY_H

#include <ros/service_traits.h>


#include <test2/MultiplyRequest.h>
#include <test2/MultiplyResponse.h>


namespace test2
{

struct Multiply
{

typedef MultiplyRequest Request;
typedef MultiplyResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Multiply
} // namespace test2


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::test2::Multiply > {
  static const char* value()
  {
    return "d93544996623378ddb27581d921401f7";
  }

  static const char* value(const ::test2::Multiply&) { return value(); }
};

template<>
struct DataType< ::test2::Multiply > {
  static const char* value()
  {
    return "test2/Multiply";
  }

  static const char* value(const ::test2::Multiply&) { return value(); }
};


// service_traits::MD5Sum< ::test2::MultiplyRequest> should match
// service_traits::MD5Sum< ::test2::Multiply >
template<>
struct MD5Sum< ::test2::MultiplyRequest>
{
  static const char* value()
  {
    return MD5Sum< ::test2::Multiply >::value();
  }
  static const char* value(const ::test2::MultiplyRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::test2::MultiplyRequest> should match
// service_traits::DataType< ::test2::Multiply >
template<>
struct DataType< ::test2::MultiplyRequest>
{
  static const char* value()
  {
    return DataType< ::test2::Multiply >::value();
  }
  static const char* value(const ::test2::MultiplyRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::test2::MultiplyResponse> should match
// service_traits::MD5Sum< ::test2::Multiply >
template<>
struct MD5Sum< ::test2::MultiplyResponse>
{
  static const char* value()
  {
    return MD5Sum< ::test2::Multiply >::value();
  }
  static const char* value(const ::test2::MultiplyResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::test2::MultiplyResponse> should match
// service_traits::DataType< ::test2::Multiply >
template<>
struct DataType< ::test2::MultiplyResponse>
{
  static const char* value()
  {
    return DataType< ::test2::Multiply >::value();
  }
  static const char* value(const ::test2::MultiplyResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // TEST2_MESSAGE_MULTIPLY_H
